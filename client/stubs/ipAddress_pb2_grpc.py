# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from stubs import ipAddress_pb2 as ipAddress__pb2


class IpAddressServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetIpAddressById = channel.unary_unary(
                '/dbAccess.IpAddressService/GetIpAddressById',
                request_serializer=ipAddress__pb2.IpAddressIdRequest.SerializeToString,
                response_deserializer=ipAddress__pb2.IpAddressResponse.FromString,
                )
        self.GetIpAddressByName = channel.unary_unary(
                '/dbAccess.IpAddressService/GetIpAddressByName',
                request_serializer=ipAddress__pb2.IpAddressNameRequest.SerializeToString,
                response_deserializer=ipAddress__pb2.IpAddressResponse.FromString,
                )
        self.GetIpAddressBySubnet = channel.unary_unary(
                '/dbAccess.IpAddressService/GetIpAddressBySubnet',
                request_serializer=ipAddress__pb2.IpAddressSubnetRequest.SerializeToString,
                response_deserializer=ipAddress__pb2.IpAddressResponse.FromString,
                )


class IpAddressServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetIpAddressById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIpAddressByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIpAddressBySubnet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IpAddressServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetIpAddressById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIpAddressById,
                    request_deserializer=ipAddress__pb2.IpAddressIdRequest.FromString,
                    response_serializer=ipAddress__pb2.IpAddressResponse.SerializeToString,
            ),
            'GetIpAddressByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIpAddressByName,
                    request_deserializer=ipAddress__pb2.IpAddressNameRequest.FromString,
                    response_serializer=ipAddress__pb2.IpAddressResponse.SerializeToString,
            ),
            'GetIpAddressBySubnet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIpAddressBySubnet,
                    request_deserializer=ipAddress__pb2.IpAddressSubnetRequest.FromString,
                    response_serializer=ipAddress__pb2.IpAddressResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dbAccess.IpAddressService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IpAddressService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetIpAddressById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbAccess.IpAddressService/GetIpAddressById',
            ipAddress__pb2.IpAddressIdRequest.SerializeToString,
            ipAddress__pb2.IpAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIpAddressByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbAccess.IpAddressService/GetIpAddressByName',
            ipAddress__pb2.IpAddressNameRequest.SerializeToString,
            ipAddress__pb2.IpAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIpAddressBySubnet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbAccess.IpAddressService/GetIpAddressBySubnet',
            ipAddress__pb2.IpAddressSubnetRequest.SerializeToString,
            ipAddress__pb2.IpAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
